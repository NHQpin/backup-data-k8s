apiVersion: v1
kind: Namespace
metadata:
  name: coredns-custom
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns-custom
  namespace: coredns-custom
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns-custom
rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    - services
    - pods
    - namespaces
    verbs:
    - list
    - watch
  - apiGroups:
    - discovery.k8s.io
    resources:
    - endpointslices
    verbs:
    - list
    - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: system:coredns-custom
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:coredns-custom
subjects:
- kind: ServiceAccount
  name: coredns-custom
  namespace: coredns-custom
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns-custom
  namespace: coredns-custom
data:
  Corefile: |
    # .:53 {
    #     errors
    #     health {
    #       lameduck 5s
    #     }
    #     ready
    #     kubernetes CLUSTER_DOMAIN REVERSE_CIDRS {
    #       fallthrough in-addr.arpa ip6.arpa
    #     }
    #     prometheus :9153
    #     forward . UPSTREAMNAMESERVER {
    #       max_concurrent 1000
    #     }
    #     cache 30
    #     loop
    #     reload
    #     loadbalance
    # }STUBDOMAINS
  log.include: |
    log
  # Private DNS resolution example. Handles FQDN resolutions for *.mydomain.com
  # Replace <dns-private-ip> with the target IP address.
  mydomain.server: |
    mydomain.com.:53 {
      forward . <dns-private-ip>
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: coredns
    meta.helm.sh/release-namespace: kube-system
  generation: 3
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: coredns
    app.kubernetes.io/version: 1.11.3
    helm.sh/chart: coredns-1.32.0
    k8s-app: coredns-custom
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: CoreDNS-custom
  name: coredns-custom
  namespace: coredns-custom
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: coredns-custom
      app.kubernetes.io/name: coredns-custom
      k8s-app: coredns-custom
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 4757bc4b253e37fe5a6d44e7c71c4ec9f8926af5efa8cb30222654628db9f539
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly",
          "operator":"Exists"}]'
      labels:
        app.kubernetes.io/instance: coredns-custom
        app.kubernetes.io/name: coredns-custom
        k8s-app: coredns-custom
    spec:
      containers:
      - args:
        - -conf
        - /etc/coredns/Corefile
        image: coredns/coredns:1.11.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: coredns-custom
        ports:
        - containerPort: 53
          name: udp-53
          protocol: UDP
        - containerPort: 53
          name: tcp-53
          protocol: TCP
        - containerPort: 9153
          name: tcp-9153
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /ready
            port: 8181
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          capabilities:
            add:
            - NET_BIND_SERVICE
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        # volumeMounts:
        # - mountPath: /etc/coredns
        #   name: config-volume
      dnsPolicy: Default
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      # volumes:
      # - configMap:
      #     defaultMode: 420
      #     items:
      #     - key: Corefile
      #       path: Corefile
      #     name: coredns
      #   name: config-volume
status:
  availableReplicas: 1
  conditions:
  - message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - message: ReplicaSet "coredns-b45bb477f" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 3
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{"prometheus.io/port":"9153","prometheus.io/scrape":"true"},"labels":{"app.kubernetes.io/name":"coredns","k8s-app":"kube-dns","kubernetes.io/cluster-service":"true","kubernetes.io/name":"CoreDNS"},"name":"kube-dns","namespace":"kube-system"},"spec":{"ports":[{"name":"dns","port":53,"protocol":"UDP"},{"name":"dns-tcp","port":53,"protocol":"TCP"},{"name":"metrics","port":9153,"protocol":"TCP"}],"selector":{"app.kubernetes.io/name":"coredns","k8s-app":"kube-dns"},"type":"ClusterIP"}}
    prometheus.io/port: "9153"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/name: coredns-custom
    k8s-app: coredns-custom
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: CoreDNS
  name: kube-dns-custom
  namespace: coredns-custom
spec:
  clusterIP: 10.254.156.135
  clusterIPs:
  - 10.254.156.135
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: dns
    port: 53
    protocol: UDP
    targetPort: 53
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: 53
  - name: metrics
    port: 9153
    protocol: TCP
    targetPort: 9153
  selector:
    app.kubernetes.io/name: coredns-custom
    k8s-app: coredns-custom
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}
